import { error, log } from "nea-boot";
import { getFormatDateTime } from "nea-boot";
import { ChatGPTAPIBrowser } from 'chatgpt'

//@Component('chatGptService')
export class ChatGptService {

    private chatGptApi: ChatGPTAPIBrowser

    constructor() {
        log('ChatGptService.constructor')
        this.loadChatGptApi().catch(e => {
            console.log(e)
        })
    }

    public async loadChatGptApi() {
        try {
            const api = new ChatGPTAPIBrowser({
                email: process.env.OPENAI_EMAIL,
                password: process.env.OPENAI_PASSWORD
            })
            await api.init()
            this.chatGptApi = api
        } catch (e) {
            error(e)
            log(`[ChatGptService.loadChatGptApi]- refreshAccessToken fail`)
        }

    }

    public async send2(msg: string) {
        console.log('send')
        return msg
    }

    public async send(msg: string) {
        let isAuthenticated = await this.chatGptApi.getIsAuthenticated();
        if (!isAuthenticated) {
            return {
                status: -1,
                message: 'fail authenticated'
            }
        } else {
            console.log(`[${getFormatDateTime()}]发送消息：${msg}`)
            let data = await this.chatGptApi.sendMessage(msg)
            console.log(`[${getFormatDateTime()}]返回消息：\n${data}`)
            return data
        }
    }


    public async conversation(msg: string) {
        let conversation = null;//await this.chatGptApi.getConversation();
        if (!conversation) {
            return {
                status: -1,
                message: 'fail get a conversation'
            }
        } else {
            console.log(`[${getFormatDateTime()}]发送消息：${msg}`)
            let data = await conversation.sendMessage(msg)
            console.log(`[${getFormatDateTime()}]返回消息：\n${data}`)
            return data
        }
    }
}